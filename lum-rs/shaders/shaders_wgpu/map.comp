const BLOCK_PALETTE_SIZE_X: i32 = 64;
const STATIC_BLOCK_COUNT: i32 = 15; 

struct MapPushConstants {
    inverse_trans: mat4x4<f32>, 
    shift: vec4<i32>,           
    map_area: vec4<i32>,           
};

@group(0) @binding(0) var blocks_tex: texture_3d<i32>;     
@group(0) @binding(1) var blockPalette_tex: texture_storage_3d<r32sint, write>; 
@group(1) @binding(0) var<storage, read> pco_shared: array<MapPushConstants>;
@group(1) @binding(1) var modelVoxels_tex: texture_3d<i32>; 


fn voxel_in_palette(relative_voxel_pos: vec3<i32>, block_id: i32) -> vec3<i32> {
    let block_x = block_id % BLOCK_PALETTE_SIZE_X;
    let block_y = block_id / BLOCK_PALETTE_SIZE_X;
    return relative_voxel_pos + vec3<i32>(16 * block_x, 16 * block_y, 0);
}

fn decode_voxel_pos(x_id: u32, size: vec3<u32>) -> vec3<u32> {
    let z_pos = x_id / (size.x * size.y);
    let remainder = x_id % (size.x * size.y);
    let y_pos = remainder / size.x;
    let x_pos = remainder % size.x;
    return vec3<u32>(x_pos, y_pos, z_pos);
}
@compute @workgroup_size(64, 1, 1)
fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let instance_id = global_id.z;
    
    let pco = pco_shared[instance_id];
    
    let shift_f32 = vec3<f32>(pco.shift.xyz);

    let invocation_voxel_f32 = vec3<f32>(decode_voxel_pos(global_id.x, vec3<u32>(pco.map_area.xyz))); 
    
    let world_voxel_f32 = invocation_voxel_f32 + 0.5 + shift_f32;
    let world_voxel_i32 = vec3<i32>(floor(world_voxel_f32)); 
    let model_voxel_f32 = (pco.inverse_trans * vec4<f32>(world_voxel_f32, 1.0)).xyz;
    let model_voxel_i32 = vec3<i32>(floor(model_voxel_f32)); 
    
    let target_block_i32 = world_voxel_i32 / 16;
    let target_block_id = textureLoad(blocks_tex, target_block_i32, 0).r; 

    if (target_block_id >= STATIC_BLOCK_COUNT) {
        let voxel_data = textureLoad(modelVoxels_tex, model_voxel_i32, 0); 
        if (voxel_data.r != 0) {
            let voxel_in_block_i32 = world_voxel_i32 % 16;
            let target_palette_voxel_i32 = voxel_in_palette(voxel_in_block_i32, target_block_id);
            textureStore(blockPalette_tex, target_palette_voxel_i32, voxel_data);
        }
    }
}